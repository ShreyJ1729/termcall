TermCall Product Requirements Document (PRD)
1. Overview
TermCall is a command-line interface (CLI) application that enables peer-to-peer video and audio calls directly within the terminal, styled as "FaceTime in the Terminal." It leverages WebRTC for real-time communication and Firebase Realtime Database (RTDB) for signaling. The application includes user authentication, a searchable user directory, call request functionality, and a unique terminal-based video rendering system using ASCII and Sixel graphics.
2. Objectives

Provide a seamless, terminal-based video and audio calling experience.
Enable secure user authentication with persistent login sessions.
Allow users to browse and search for other registered users by email.
Facilitate intuitive call initiation and response mechanisms.
Render video feeds in the terminal using ASCII for the remote user and Sixel for the local user’s preview.

3. Key Features
3.1 User Authentication

Login System:
Users log in using their email address and a full name (provided during initial registration).
An autogenerated key is stored locally to enable persistent login sessions on the same device, eliminating the need for repeated logins.
Key is stored securely in the user’s local system (e.g., in a configuration file or system keychain).


Registration:
On first use, users provide their email and full name.
A unique user ID and authentication key are generated and stored in Firebase RTDB.
Email verification to ensure valid email addresses.


Security:
Authentication keys are encrypted before storage.
Firebase Authentication handles secure user management.



3.2 User Directory

Browse Users:
CLI interface displays a list of all registered TermCall users, showing full names and email addresses.
Users can scroll through the list using arrow keys or similar CLI navigation.


Search Functionality:
Users can search for others by email address using a search command (e.g., termcall search <email>).
Search results display matching users’ full names and emails.


Implementation:
Firebase RTDB stores user profiles (user ID, full name, email).
CLI fetches and caches user list for faster browsing, with periodic updates.



3.3 Call Initiation

Call Request:
From the user directory, users select a contact by highlighting their name/email and pressing Enter.
A call request (ping) is sent to the recipient via Firebase RTDB.


Recipient Notification:
The recipient receives a CLI notification (e.g., “Incoming call from [Full Name] ”).
Options to accept (y) or reject (n) the call.


Timeout:
Call requests time out after 30 seconds if not answered.


Signaling:
WebRTC signaling data (SDP offer/answer, ICE candidates) is exchanged via Firebase RTDB.



3.4 WebRTC Video and Audio Call

Peer-to-Peer Connection:
WebRTC handles video and audio streams between peers.
Video resolution set to 480p to optimize for low-bandwidth terminal rendering.


Audio:
Standard WebRTC audio stream for clear voice communication.
Configurable audio input/output devices via CLI flags (e.g., termcall --mic <device>).


Connection Management:
Automatic reconnection attempts on brief network interruptions.
Graceful call termination with a CLI command (e.g., Ctrl+C or termcall end).



3.5 Terminal Video Rendering

Remote User Video:
Rendered as colored ASCII graphics in the main terminal window.
Uses terminal color codes to approximate 480p video frames.
Updates at a low frame rate (e.g., 5-10 FPS) to balance performance and visibility.


Local User Video (Preview):
Rendered in the bottom-right corner using Sixel graphics for higher resolution in a compact area.
Sixel ensures a clearer self-view despite terminal constraints.


Implementation:
Custom library or module to convert WebRTC video frames to ASCII and Sixel formats.
Adjustable rendering quality via CLI flags (e.g., termcall --ascii-density high).



3.6 CLI User Interface

Design Principles:
Simple, text-based UI optimized for terminal environments.
Clear prompts and feedback for all actions (login, browsing, calling).
Keyboard-driven navigation (e.g., arrow keys, Enter, Ctrl+C).


Commands:
termcall login: Initiates login/registration.
termcall list: Displays all users.
termcall search <email>: Searches for users by email.
termcall call <email>: Initiates a call to a specific user.
termcall end: Ends the current call.
termcall logout: Logs out and clears local key.



4. Technical Requirements
4.1 Technology Stack

Language: Python (for CLI compatibility and WebRTC libraries).
WebRTC: Use aiortc or similar Python WebRTC library for peer-to-peer communication.
Signaling: Firebase Realtime Database for exchanging WebRTC signaling data.
Authentication: Firebase Authentication for email-based login and key management.
Video Rendering:
ASCII: Custom module to convert video frames to colored ASCII characters.
Sixel: Use libsixel or equivalent for high-resolution terminal graphics.


Dependencies:
Python libraries: firebase-admin, aiortc, pyfiglet (for ASCII art), libsixel.
Terminal emulator with Sixel support (e.g., xterm, mlterm).



4.2 System Requirements

Operating Systems: Linux, macOS, Windows (with WSL for Sixel support).
Hardware:
Webcam and microphone for video/audio input.
Minimum 2GB RAM for WebRTC processing.


Terminal:
Sixel-compatible terminal emulator for local video preview.
Minimum terminal size: 80x24 characters.



4.3 Firebase RTDB Structure

Users:/users/{user_id}:
  email: string
  full_name: string
  auth_key: string (encrypted)
  last_active: timestamp


Call Requests:/call_requests/{request_id}:
  caller_id: string
  recipient_id: string
  status: string (pending/accepted/rejected)
  timestamp: timestamp


Signaling:/signaling/{call_id}:
  offer: string
  answer: string
  ice_candidates: array



5. User Flow

Login:
Run termcall login, enter email and full name (first time) or use stored key.
Firebase verifies credentials and returns user ID.


Browse/Search:
Run termcall list to view all users or termcall search <email> to find a user.
Navigate with arrow keys to select a contact.


Initiate Call:
Press Enter on a user or run termcall call <email>.
Recipient receives a notification and responds (y/n).


Call:
WebRTC connection established via Firebase signaling.
Remote video renders as ASCII, local video as Sixel in bottom-right.
Audio streams in real-time.


End Call:
Press Ctrl+C or run termcall end to terminate.


Logout:
Run termcall logout to clear local key and sign out.



6. Non-Functional Requirements

Performance:
Call setup time: <5 seconds.
Video rendering: 30 FPS for ASCII and Sixel.


Security:
Encrypt authentication keys and signaling data.
Validate all user inputs to prevent injection attacks.


Scalability:
Support up to 10,000 registered users in Firebase RTDB.
Handle up to 1,000 concurrent calls.


Reliability:
Graceful error handling for network disruptions.
Clear error messages in CLI for user feedback.



7. Future Considerations

Group calls with multiple participants.
Screen sharing via WebRTC data channels.
Customizable ASCII rendering styles.
Support for additional authentication methods (e.g., OAuth).